::using KissLog;
::using KissLog.AspNet.Mvc;
::using KissLog.AspNet.Web;
::using KissLog.CloudListeners.Auth;
::using KissLog.CloudListeners.RequestLogsListener;
::using KissLog.FlushArgs;
using System;
using System.Configuration;
using System.Diagnostics;
using System.Text;
using System.Web.Mvc;
using System.Web.Routing;

namespace NLog_AspNet_MVC
{
    public class MvcApplication : System.Web.HttpApplication
    {
        protected void Application_Start()
        {
            AreaRegistration.RegisterAllAreas();
            RouteConfig.RegisterRoutes(RouteTable.Routes);

            ::GlobalFilters.Filters.Add(new KissLogWebMvcExceptionFilterAttribute());

            ::ConfigureKissLog();
        }

        ::protected void Application_Error(object sender, EventArgs e)
        ::{
            ::Exception exception = Server.GetLastError();
            ::if (exception != null)
            ::{
                ::var logger = Logger.Factory.Get();
                ::logger.Error(exception);

                ::if (logger.AutoFlush() == false)
                ::{
                    ::Logger.NotifyListeners(logger);
                ::}
            ::}
        ::}

        private void ConfigureKissLog()
        {
            // optional KissLog configuration
            KissLogConfiguration.Options
                .ShouldLogResponseBody((ILogListener listener, FlushLogArgs args, bool defaultValue) =>
                {
                    if (args.WebProperties.Request.Url.LocalPath == "/")
                        return true;

                    return defaultValue;
                })
                .AppendExceptionDetails((Exception ex) =>
                {
                    StringBuilder sb = new StringBuilder();

                    if (ex is System.NullReferenceException nullRefException)
                    {
                        sb.AppendLine("Important: check for null references");
                    }

                    return sb.ToString();
                });

            // KissLog internal logs
            KissLogConfiguration.InternalLog = (message) =>
            {
                Debug.WriteLine(message);
            };

            ::RegisterKissLogListeners();
        }

        private void RegisterKissLogListeners()
        {
            // register KissLog.net cloud listener
            KissLogConfiguration.Listeners.Add(new RequestLogsApiListener(new Application(
                ConfigurationManager.AppSettings["KissLog.OrganizationId"],     // "{organizationId}"
                ConfigurationManager.AppSettings["KissLog.ApplicationId"])      // "{applicationId}"
            )
            {
                ApiUrl = ConfigurationManager.AppSettings["KissLog.ApiUrl"]     // "{kissLogApiUrl}"
            });
        }

        ::public static KissLogHttpModule KissLogHttpModule = new KissLogHttpModule();

        ::public override void Init()
        ::{
            ::base.Init();

            ::KissLogHttpModule.Init(this);
        ::}
    }
}
